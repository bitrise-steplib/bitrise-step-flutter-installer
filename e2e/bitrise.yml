format_version: "11"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

workflows:
  test_preinstalled_version:
    after_run:
    - _test_flutter_installation
    steps:
    - path::./:
        run_if: "true"
        title: test preinstalled version
        inputs:
        - is_debug: "true"
        - version: 3.16.8

  test_preinstalled_version2:
    after_run:
    - _test_flutter_installation
    steps:
    - path::./:
        run_if: "true"
        title: test preinstalled version 2
        inputs:
        - is_debug: "true"
        - version: 3.22.0

  test_clean_install_no_version_input:
    before_run:
    - _remove_flutter
    after_run:
    - _test_flutter_installation
    steps:
    - path::./:
        run_if: "true"
        title: test install with no input
        inputs:
        - is_debug: "true"

  test_clean_install_stable:
    before_run:
    - _remove_flutter
    after_run:
    - _test_flutter_installation
    steps:
    - path::./:
        run_if: "true"
        title: test install stable version
        inputs:
        - version: stable
        - is_debug: "true"

  test_clean_install_specific_version:
    before_run:
    - _remove_flutter
    after_run:
    - _test_flutter_installation
    steps:
    - path::./:
        run_if: "true"
        title: install specific version
        inputs:
        - version: 3.32.5
        - is_debug: "true"

  test_clean_install_bundle:
    before_run:
    - _remove_flutter
    after_run:
    - _test_flutter_installation
    steps:
    - script:
        title: set platform specific bundle URL
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            URL="placeholder"
            if [ $(uname -s) == "Darwin" ]; then
              URL="https://storage.googleapis.com/flutter_infra/releases/beta/macos/flutter_macos_v1.6.3-beta.zip"
            fi
            if [ $(uname -s) == "Linux" ]; then
              URL="https://storage.googleapis.com/flutter_infra/releases/beta/linux/flutter_linux_v1.6.3-beta.tar.xz"
            fi
            envman add --key "BUNDLE_URL" --value "${URL}"
    - path::./:
        run_if: "true"
        title: platform specific bundle install
        inputs:
        - installation_bundle_url: $BUNDLE_URL
          opts:
            is_expand: true
        - is_debug: "true"

  test_clean_install_dev:
    before_run:
    - _remove_flutter
    after_run:
    - _test_flutter_installation
    steps:
    - path::./:
        run_if: "true"
        title: install version from dev channel
        inputs:
        - version:  2.11.0-0.1.pre dev
        - is_debug: "true"

  test_clean_install_version_with_channel:
    before_run:
    - _remove_flutter
    after_run:
    - _test_flutter_installation
    steps:
    - path::./:
        run_if: "true"
        title: install specific version with channel
        inputs:
        - version: dev
        - is_debug: "true"

  test_clean_install_legacy_version:
    before_run:
    - _remove_flutter
    after_run:
    - _test_flutter_installation
    steps:
    - path::./:
        run_if: "true"
        title: install legacy version
        inputs:
        - version: v1.7.1
        - is_debug: "true"

  _remove_flutter:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -x

            flutter_bin_path="$(which flutter)"
            if [ $? == "1" ]; then
              echo "flutter not installed"
              exit 0
            fi

            set -e

            flutter_bin_dir="$(dirname "$flutter_bin_path")"
            flutter_sdk_dir="$(dirname "$flutter_bin_dir")"

            echo "cleanup flutter sdk: $flutter_sdk_dir"

            set +e

            rm -rf "$flutter_sdk_dir"

            if [ $? == "1" ]; then
              echo "flutter sdk cleanup failed, trying with sudo"

              sudo rm -rf "$flutter_sdk_dir"

              if [ $? == "1" ]; then
                echo "flutter sdk cleanup failed"
                exit 1
              fi
            fi

            flutter_bin_path="$(which flutter)"
            if [ $? == "0" ]; then
              echo "flutter sdk cleanup failed"
              exit 1
            fi

  _test_flutter_installation:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -ex

            flutter --version
